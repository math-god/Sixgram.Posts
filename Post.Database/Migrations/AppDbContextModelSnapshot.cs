// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Post.Database;

#nullable disable

namespace Post.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Post.Database.EntityModels.CommentaryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("commentary_id");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)")
                        .HasColumnName("commentary");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("commentaries");
                });

            modelBuilder.Entity("Post.Database.EntityModels.LikeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("like_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("Post.Database.EntityModels.PostModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31ead996-0fb5-4b13-b1a8-6f2c6287c211"),
                            DateCreated = new DateTime(2022, 4, 12, 15, 25, 0, 672, DateTimeKind.Local).AddTicks(8165),
                            Description = "Eu cum iuvaret debitis voluptatibus, esse perfecto reformidans id has.",
                            FileId = new Guid("f3c2d704-7f31-4530-8899-4ab54addb09d"),
                            UserId = new Guid("8d8da77a-6fc3-4245-9d15-23bbd363843b")
                        },
                        new
                        {
                            Id = new Guid("b07f377f-a9ce-4ee6-a78e-f328561ff3e6"),
                            DateCreated = new DateTime(2022, 4, 12, 15, 25, 0, 672, DateTimeKind.Local).AddTicks(8172),
                            Description = "Tation delenit percipitur at vix. Tation delenit percipitur at vix",
                            FileId = new Guid("825c557c-75b9-41b4-94a1-87d22d560cef"),
                            UserId = new Guid("f955a266-254a-4626-91b1-a2b1415a86f6")
                        });
                });

            modelBuilder.Entity("Post.Database.EntityModels.SubscriptionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<Guid>("RespondentId")
                        .HasColumnType("uuid")
                        .HasColumnName("respondent_id");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriber_id");

                    b.HasKey("Id");

                    b.ToTable("subscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b9f3fe5-cae9-436d-bca0-a12b4bc21bf5"),
                            DateCreated = new DateTime(2022, 4, 12, 15, 25, 0, 672, DateTimeKind.Local).AddTicks(7365),
                            RespondentId = new Guid("534f619f-ff1b-4f3a-bea6-41cd6dc47c85"),
                            SubscriberId = new Guid("af93b103-d20d-4a4d-8ed4-3e33eeefb0c0")
                        },
                        new
                        {
                            Id = new Guid("261b9381-f497-49dd-aaec-f7393e778b35"),
                            DateCreated = new DateTime(2022, 4, 12, 15, 25, 0, 672, DateTimeKind.Local).AddTicks(7394),
                            RespondentId = new Guid("5bbe4c43-12c2-4a46-af60-afbfae516465"),
                            SubscriberId = new Guid("5a3c51ab-c100-4f45-b559-6919b2144214")
                        });
                });

            modelBuilder.Entity("Post.Database.EntityModels.CommentaryModel", b =>
                {
                    b.HasOne("Post.Database.EntityModels.PostModel", "PostModel")
                        .WithMany("CommentaryModels")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostModel");
                });

            modelBuilder.Entity("Post.Database.EntityModels.LikeModel", b =>
                {
                    b.HasOne("Post.Database.EntityModels.PostModel", "PostModel")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostModel");
                });

            modelBuilder.Entity("Post.Database.EntityModels.PostModel", b =>
                {
                    b.Navigation("CommentaryModels");
                });
#pragma warning restore 612, 618
        }
    }
}
