// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Post.Database;

#nullable disable

namespace Post.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Post.Database.EntityModels.CommentaryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("commentary_id");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)")
                        .HasColumnName("commentary");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("commentaries");
                });

            modelBuilder.Entity("Post.Database.EntityModels.LikeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("like_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("Post.Database.EntityModels.PostModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("description");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fb3f0ef-2a57-4f77-8a58-64373d07bb59"),
                            DateCreated = new DateTime(2022, 4, 13, 10, 27, 23, 67, DateTimeKind.Local).AddTicks(7735),
                            Description = "Eu cum iuvaret debitis voluptatibus, esse perfecto reformidans id has.",
                            FileId = new Guid("99b2c558-7266-432a-96b2-014ac3d5306b"),
                            UserId = new Guid("8f1260e6-d500-4540-a168-f4eddf84c23d")
                        },
                        new
                        {
                            Id = new Guid("c61bcaca-4d31-49af-93d5-939848abe585"),
                            DateCreated = new DateTime(2022, 4, 13, 10, 27, 23, 67, DateTimeKind.Local).AddTicks(7801),
                            Description = "Tation delenit percipitur at vix. Tation delenit percipitur at vix",
                            FileId = new Guid("4ff28698-4892-49f6-b86e-7f6c5e109aab"),
                            UserId = new Guid("87f4233e-71dd-477e-8129-42139db8eb3b")
                        });
                });

            modelBuilder.Entity("Post.Database.EntityModels.SubscriptionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day_created");

                    b.Property<Guid>("RespondentId")
                        .HasColumnType("uuid")
                        .HasColumnName("respondent_id");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriber_id");

                    b.HasKey("Id");

                    b.ToTable("subscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2a6ff36-92a9-4faf-a59e-bcb2a89ebf30"),
                            DateCreated = new DateTime(2022, 4, 13, 10, 27, 23, 67, DateTimeKind.Local).AddTicks(6830),
                            RespondentId = new Guid("88ebf469-1b41-4063-b628-184da6e0bd0b"),
                            SubscriberId = new Guid("0b9017f6-ff43-480e-9bfa-e8da33d1b3d7")
                        },
                        new
                        {
                            Id = new Guid("1173b93f-c5a2-4c8d-80fb-f9f3e3585ee7"),
                            DateCreated = new DateTime(2022, 4, 13, 10, 27, 23, 67, DateTimeKind.Local).AddTicks(6846),
                            RespondentId = new Guid("9f41bfcb-d91b-435e-8ea6-abfbc596ac9a"),
                            SubscriberId = new Guid("6a879896-082b-4bfe-b868-3d24304eb45a")
                        });
                });

            modelBuilder.Entity("Post.Database.EntityModels.CommentaryModel", b =>
                {
                    b.HasOne("Post.Database.EntityModels.PostModel", "Post")
                        .WithMany("Commentaries")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Post.Database.EntityModels.LikeModel", b =>
                {
                    b.HasOne("Post.Database.EntityModels.PostModel", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Post.Database.EntityModels.PostModel", b =>
                {
                    b.Navigation("Commentaries");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
